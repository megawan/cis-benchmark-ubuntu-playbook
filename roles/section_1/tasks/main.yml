---
# 1.1 Filesystem Configuration
# 1.1.1 Disable unused filesystems
- name: 1.1.1.1 Ensure mounting of cramfs filesystems is disabled
  ansible.builtin.modprobe:
    name: cramfs
    state: absent

- name: 1.1.1.2 Ensure mounting of vFAT filesystems is disabled
  ansible.builtin.modprobe:
    name: vfat
    state: absent

# 1.1.2 Ensure separate partition exists for /tmp
- name: 1.1.2 Ensure separate partition exists for /tmp
  ansible.builtin.mount:
    path: /tmp
    src: /dev/tmp_partition
    fstype: ext4
    opts: defaults,nodev,nosuid,noexec
    state: mounted
  when: separate_tmp_partition.stat.exists

- name: Check if separate /tmp partition exists
  ansible.builtin.stat:
    path: /dev/tmp_partition
  register: separate_tmp_partition
  check_mode: yes
  changed_when: false

# 1.2 Configure Software Updates
# 1.2.1 Ensure package manager repositories are configured

- name: 1.2.1 Ensure package manager repositories are configured
  block:
    - name: Check if universe repository is enabled
      ansible.builtin.command:
        cmd: add-apt-repository --list | grep '^deb.*universe'
      register: universe_repository
      check_mode: no
      changed_when: false

    - name: Enable universe repository
      ansible.builtin.command:
        cmd: add-apt-repository universe
      when: universe_repository.stdout == ""

  # Add more tasks for other repositories as needed

# 1.2.2 Ensure GPG keys are configured
# This task is distribution-specific and may require manual verification.

# 1.2.3 Ensure package manager is using strong cryptography
- name: 1.2.3 Ensure package manager is using strong cryptography
  block:
    - name: Check if APT is using strong cryptography
      ansible.builtin.lineinfile:
        path: /etc/apt/apt.conf.d/99strong-crypto
        line: 'Acquire::https::Download-Only::cipher "{{ item }}";'
        regexp: 'Acquire::https::Download-Only::cipher "{{ item }}";'
        state: present
      loop:
        - "TLSv1.2"
        - "TLSv1.3"
      check_mode: yes
      register: strong_crypto_check
      changed_when: false

    - name: Configure APT to use strong cryptography
      ansible.builtin.lineinfile:
        path: /etc/apt/apt.conf.d/99strong-crypto
        line: 'Acquire::https::Download-Only::cipher "{{ item }}";'
        state: present
      loop:
        - "TLSv1.2"
        - "TLSv1.3"
      when: strong_crypto_check is changed

# 1.3 Filesystem Integrity Checking
# 1.3.1 Ensure AIDE is installed
- name: 1.3.1 Ensure AIDE is installed
  ansible.builtin.package:
    name: aide
    state: present

# 1.3.2 Ensure filesystem integrity is regularly checked
- name: 1.3.2 Ensure filesystem integrity is regularly checked
  ansible.builtin.cron:
    name: "AIDE filesystem integrity check"
    minute: "0"
    hour: "5"
    user: root
    job: "/usr/bin/aide --config /etc/aide/aide.conf --check"

# 1.4 Secure Boot Settings
# 1.4.1 Ensure permissions on bootloader config are configured
- name: 1.4.1 Ensure permissions on bootloader config are configured
  ansible.builtin.file:
    path: /boot/grub/grub.cfg
    owner: root
    group: root
    mode: '0400'

# 1.4.2 Ensure bootloader password is set
- name: 1.4.2 Ensure bootloader password is set
  block:
    - name: Check if bootloader password is set
      ansible.builtin.command:
        cmd: grep "^set superusers=" /boot/grub/grub.cfg
      register: bootloader_password
      check_mode: no
      changed_when: false

    - name: Set bootloader password
      ansible.builtin.command:
        cmd: grub-mkpasswd-pbkdf2 | tee /tmp/grubpassword
      when: bootloader_password.stdout == ""

    - name: Update bootloader configuration with password
      ansible.builtin.lineinfile:
        path: /etc/grub.d/40_custom
        insertafter: "exec tail"
        line: 'set superusers="root"'
      when: bootloader_password.stdout == ""

    - name: Update bootloader configuration with encrypted password
      ansible.builtin.lineinfile:
        path: /etc/grub.d/40_custom
        insertafter: "set superusers"
        line: "password_pbkdf2 root {{ lookup('file', '/tmp/grubpassword') }}"
      when: bootloader_password.stdout == ""

    - name: Update grub configuration
      ansible.builtin.command:
        cmd: update-grub
      when: bootloader_password.stdout == ""

# 1.4.3 Ensure authentication required for single user mode
# This task is distribution-specific and may require manual verification.

# 1.4.4 Ensure interactive boot is not enabled
- name: 1.4.4 Ensure interactive boot is not enabled
  ansible.builtin.lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_DISABLE_RECOVERY='
    line: 'GRUB_DISABLE_RECOVERY=true'
  notify: update grub

# 1.5 Additional Process Hardening
# 1.5.1 Ensure XD/NX support is enabled
# This task is hardware-dependent and may require manual verification.

# 1.5.2 Ensure Address Space Layout Randomization (ASLR) is enabled
- name: 1.5.2 Ensure Address Space Layout Randomization (ASLR) is enabled
  ansible.builtin.sysctl:
    name: kernel.randomize_va_space
    value: 2
    state: present
    sysctl_set: yes
    reload: yes

# 1.5.3 Ensure prelink is disabled
- name: 1.5.3 Ensure prelink is disabled
  block:
    - name: Check if prelink is installed
      ansible.builtin.package_facts:
        manager: auto

    - name: Remove prelink if installed
      ansible.builtin.package:
        name: prelink
        state: absent
      when: "'prelink' in ansible_facts.packages"

    - name: Undo prelinking if prelink was installed
      ansible.builtin.command:
        cmd: prelink -ua
      when: "'prelink' in ansible_facts.packages"

# 1.6 Mandatory Access Control
# 1.6.1 Configure SELinux or AppArmor
# This section depends on your preference for SELinux or AppArmor.
# In this example, we'll configure AppArmor since it's the default MAC for Ubuntu.

# 1.6.1.1 Ensure AppArmor is installed
- name: 1.6.1.1 Ensure AppArmor is installed
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - apparmor
    - apparmor-utils

# 1.6.1.2 Ensure AppArmor is enabled and running
- name: 1.6.1.2 Ensure AppArmor is enabled and running
  ansible.builtin.service:
    name: apparmor
    state: started
    enabled: yes

# 1.6.1.3 Ensure all AppArmor Profiles are enforcing
# This task depends on your system's required profiles.
# Add your required profiles to the `apparmor_profiles` variable.
- name: 1.6.1.3 Ensure all AppArmor Profiles are enforcing
  block:
    - name: Define AppArmor profiles
      set_fact:
        apparmor_profiles:
          - /sbin/dhclient
          - /usr/lib/NetworkManager/nm-dhcp-client.action
          - /usr/lib/NetworkManager/nm-dhcp-helper
          - /usr/lib/connman/scripts/dhclient-script
          - /usr/sbin/tcpdump

    - name: Check AppArmor profiles
      ansible.builtin.command:
        cmd: aa-status --profiled
      register: aa_profiled
      check_mode: no
      changed_when: false

    - name: Set AppArmor profiles to enforce mode
      ansible.builtin.command:
        cmd: aa-enforce "{{ item }}"
      loop: "{{ apparmor_profiles }}"
      when: item not in aa_profiled.stdout_lines"

# 1.6.1.4 Ensure no unconfined AppArmor processes
# This task depends on your system's requirements.
# You may need to adjust the list of expected unconfined services if needed.
- name: 1.6.1.4 Ensure no unconfined AppArmor processes
  block:
    - name: Check AppArmor unconfined services
      ansible.builtin.command:
        cmd: aa-status --unconfined
      register: aa_unconfined
      check_mode: no
      changed_when: false

    - name: Fail if unexpected unconfined services are found
      ansible.builtin.fail:
        msg: "Unexpected unconfined services found: {{ aa_unconfined.stdout }}"
      when: aa_unconfined.stdout != "0 processes are unconfined but have a profile defined."

# 1.7 Warning Banners
# 1.7.1 Command Line Warning Banners
# 1.7.1.1 Ensure message of the day is configured properly
- name: 1.7.1.1 Ensure message of the day is configured properly
  ansible.builtin.lineinfile:
    path: /etc/motd
    regexp: "^{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  loop:
    - {regexp: "Authorized uses only", line: "Authorized uses only. All activity may be monitored and reported.", state: "present"}
    - {regexp: "^\\s*#", line: "", state: "absent"}
  notify: restart sshd

# 1.7.1.2 Ensure local login warning banner is configured properly
- name: 1.7.1.2 Ensure local login warning banner is configured properly
  ansible.builtin.lineinfile:
    path: /etc/issue
    regexp: "^{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  loop:
    - {regexp: "Authorized uses only", line: "Authorized uses only. All activity may be monitored and reported.", state: "present"}
    - {regexp: "^\\s*#", line: "", state: "absent"}

# 1.7.1.3 Ensure remote login warning banner is configured properly
- name: 1.7.1.3 Ensure remote login warning banner is configured properly
  ansible.builtin.lineinfile:
    path: /etc/issue.net
    regexp: "^{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  loop:
    - {regexp: "Authorized uses only", line: "Authorized uses only. All activity may be monitored and reported.", state: "present"}
    - {regexp: "^\\s*#", line: "", state: "absent"}

# 1.7.1.4 Ensure permissions on /etc/motd are configured
- name: 1.7.1.4 Ensure permissions on /etc/motd are configured
  ansible.builtin.file:
    path: /etc/motd
    owner: root
    group: root
    mode: '0644'

# 1.7.1.5 Ensure permissions on /etc/issue are configured
- name: 1.7.1.5 Ensure permissions on /etc/issue are configured
  ansible.builtin.file:
    path: /etc/issue
    owner: root
    group: root
    mode: '0644'

# 1.7.1.6 Ensure permissions on /etc/issue.net are configured
- name: 1.7.1.6 Ensure permissions on /etc/issue.net are configured
  ansible.builtin.file:
    path: /etc/issue.net
    owner: root
    group: root
    mode: '0644'

# 1.8 Ensure updates, patches, and additional security software are installed
- name: 1.8 Ensure updates, patches, and additional security software are installed
  block:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Upgrade all packages to the latest version
      ansible.builtin.apt:
        upgrade: safe

    - name: Install unattended-upgrades package
      ansible.builtin.apt:
        name: unattended-upgrades
        state: present

    - name: Enable unattended-upgrades
      ansible.builtin.copy:
        src: /usr/share/unattended-upgrades/20auto-upgrades
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        owner: root
        group: root
        mode: '0644'