---
# 1.6 Mandatory Access Control
# 1.6.1 Configure SELinux or AppArmor
# This section depends on your preference for SELinux or AppArmor.
# In this example, we'll configure AppArmor since it's the default MAC for Ubuntu.

# 1.6.1.1 Ensure AppArmor is installed
- name: 1.6.1.1 Ensure AppArmor is installed
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - apparmor
    - apparmor-utils

# 1.6.1.2 Ensure AppArmor is enabled and running
- name: 1.6.1.2 Ensure AppArmor is enabled and running
  ansible.builtin.service:
    name: apparmor
    state: started
    enabled: yes

# 1.6.1.3 Ensure all AppArmor Profiles are enforcing
# This task depends on your system's required profiles.
# Add your required profiles to the `apparmor_profiles` variable.
- name: 1.6.1.3 Ensure all AppArmor Profiles are enforcing
  block:
    - name: Define AppArmor profiles
      set_fact:
        apparmor_profiles:
          - /sbin/dhclient
          - /usr/lib/NetworkManager/nm-dhcp-client.action
          - /usr/lib/NetworkManager/nm-dhcp-helper
          - /usr/lib/connman/scripts/dhclient-script
          - /usr/sbin/tcpdump

    - name: Check AppArmor profiles
      ansible.builtin.command:
        cmd: aa-status --profiled
      register: aa_profiled
      check_mode: no
      changed_when: false

    - name: Set AppArmor profiles to enforce mode
      ansible.builtin.command:
        cmd: aa-enforce "{{ item }}"
      loop: "{{ apparmor_profiles }}"
      when: item not in aa_profiled.stdout_lines"

# 1.6.1.4 Ensure no unconfined AppArmor processes
# This task depends on your system's requirements.
# You may need to adjust the list of expected unconfined services if needed.
- name: 1.6.1.4 Ensure no unconfined AppArmor processes
  block:
    - name: Check AppArmor unconfined services
      ansible.builtin.command:
        cmd: aa-status --unconfined
      register: aa_unconfined
      check_mode: no
      changed_when: false

    - name: Fail if unexpected unconfined services are found
      ansible.builtin.fail:
        msg: "Unexpected unconfined services found: {{ aa_unconfined.stdout }}"
      when: aa_unconfined.stdout != "0 processes are unconfined but have a profile defined."
